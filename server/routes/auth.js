const express = require("express");
const asyncHandler = require("express-async-handler");
const router = express.Router();
const authService = require("../services/authService");
const { BadRequestError, CustomError } = require("../utils/errorHandler");

// ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/naver)
router.get(
  "/naver",
  asyncHandler(async (req, res) => {
    const naverAuthUrl = `https://nid.naver.com/oauth2.0/authorize?response_type=code&client_id=${
      process.env.NAVER_CLIENT_ID
    }&redirect_uri=${process.env.NAVER_CALLBACK_URL}&state=${Math.random()
      .toString(36)
      .substring(2, 15)}`;

    res.redirect(naverAuthUrl);
  })
);

// ÎÑ§Ïù¥Î≤Ñ ÏΩúÎ∞± Ï≤òÎ¶¨ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/naver/callback)
router.get(
  "/naver/callback",
  asyncHandler(async (req, res) => {
    const { code, state, error, error_description } = req.query;
    if (error) {
      throw new CustomError(error_description, 401);
    }

    // 1. ÏÑúÎπÑÏä§ Î°úÏßÅ Ìò∏Ï∂ú
    const result = await authService.naverLogin(code, state);

    // 2. ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å JWT ÌÜ†ÌÅ∞ Ï†ÑÎã¨ (Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî ÌîÑÎ°†Ìä∏ÏóîÎìúÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏)
    res.status(200).json({
      success: true,
      message: "ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ",
      data: result.user,
      token: result.token,
    });
    // üí° Ï∞∏Í≥†: Ïã§Ï†ú Ïö¥ÏòÅ ÌôòÍ≤ΩÏóêÏÑúÎäî res.redirect('ÌîÑÎ°†Ìä∏ÏóîÎìú_Ï£ºÏÜå?token=' + result.token)ÏôÄ Í∞ôÏù¥ Ï≤òÎ¶¨
  })
);

// Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/google)
router.get(
  "/google",
  asyncHandler(async (req, res) => {
    const googleAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${process.env.GOOGLE_CLIENT_ID}&redirect_uri=${process.env.GOOGLE_CALLBACK_URL}&response_type=code&scope=profile email`;
    res.redirect(googleAuthUrl);
  })
);

// Íµ¨Í∏Ä ÏΩúÎ∞± Ï≤òÎ¶¨ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/google/callback)
router.get(
  "/google/callback",
  asyncHandler(async (req, res) => {
    const { code, error, error_description } = req.query;
    if (error) {
      throw new CustomError(error_description, 401);
    }

    const result = await authService.googleLogin(code);
    res.status(200).json({
      success: true,
      message: "Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ",
      data: result.user,
      token: result.token,
    });
  })
);

// Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/kakao)
router.get(
  "/kakao",
  asyncHandler(async (req, res) => {
    const kakaoAuthUrl = `https://kauth.kakao.com/oauth/authorize?client_id=${process.env.KAKAO_CLIENT_ID}&redirect_uri=${process.env.KAKAO_CALLBACK_URL}&response_type=code`;
    res.redirect(kakaoAuthUrl);
  })
);

// Ïπ¥Ïπ¥Ïò§ ÏΩúÎ∞± Ï≤òÎ¶¨ ÎùºÏö∞Ìä∏ (GET /api/v1/auth/kakao/callback)
router.get(
  "/kakao/callback",
  asyncHandler(async (req, res) => {
    const { code, error, error_description } = req.query;
    if (error) {
      throw new CustomError(error_description, 401);
    }

    const result = await authService.kakaoLogin(code);
    res
      .status(200)
      .json({
        success: true,
        message: "Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ",
        data: result.user,
        token: result.token,
      });
  })
);

module.exports = router;
